// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: clientcomm/v1/clientcomm.proto

package clientcommv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientCommService_Stream_FullMethodName = "/clientcomm.v1.ClientCommService/Stream"
)

// ClientCommServiceClient is the client API for ClientCommService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientCommServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (ClientCommService_StreamClient, error)
}

type clientCommServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientCommServiceClient(cc grpc.ClientConnInterface) ClientCommServiceClient {
	return &clientCommServiceClient{cc}
}

func (c *clientCommServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (ClientCommService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientCommService_ServiceDesc.Streams[0], ClientCommService_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &clientCommServiceStreamClient{stream}
	return x, nil
}

type ClientCommService_StreamClient interface {
	Send(*SignedClientMessage) error
	Recv() (*SignedServerMessage, error)
	grpc.ClientStream
}

type clientCommServiceStreamClient struct {
	grpc.ClientStream
}

func (x *clientCommServiceStreamClient) Send(m *SignedClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientCommServiceStreamClient) Recv() (*SignedServerMessage, error) {
	m := new(SignedServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientCommServiceServer is the server API for ClientCommService service.
// All implementations must embed UnimplementedClientCommServiceServer
// for forward compatibility
type ClientCommServiceServer interface {
	Stream(ClientCommService_StreamServer) error
	mustEmbedUnimplementedClientCommServiceServer()
}

// UnimplementedClientCommServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientCommServiceServer struct {
}

func (UnimplementedClientCommServiceServer) Stream(ClientCommService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedClientCommServiceServer) mustEmbedUnimplementedClientCommServiceServer() {}

// UnsafeClientCommServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientCommServiceServer will
// result in compilation errors.
type UnsafeClientCommServiceServer interface {
	mustEmbedUnimplementedClientCommServiceServer()
}

func RegisterClientCommServiceServer(s grpc.ServiceRegistrar, srv ClientCommServiceServer) {
	s.RegisterService(&ClientCommService_ServiceDesc, srv)
}

func _ClientCommService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientCommServiceServer).Stream(&clientCommServiceStreamServer{stream})
}

type ClientCommService_StreamServer interface {
	Send(*SignedServerMessage) error
	Recv() (*SignedClientMessage, error)
	grpc.ServerStream
}

type clientCommServiceStreamServer struct {
	grpc.ServerStream
}

func (x *clientCommServiceStreamServer) Send(m *SignedServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientCommServiceStreamServer) Recv() (*SignedClientMessage, error) {
	m := new(SignedClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientCommService_ServiceDesc is the grpc.ServiceDesc for ClientCommService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientCommService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clientcomm.v1.ClientCommService",
	HandlerType: (*ClientCommServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _ClientCommService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "clientcomm/v1/clientcomm.proto",
}
