// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: clientmgmt/v1/clientmgmt.proto

package clientmgmtv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientMgmtService_Stream_FullMethodName = "/clientmgmt.v1.ClientMgmtService/Stream"
)

// ClientMgmtServiceClient is the client API for ClientMgmtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientMgmtServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (ClientMgmtService_StreamClient, error)
}

type clientMgmtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientMgmtServiceClient(cc grpc.ClientConnInterface) ClientMgmtServiceClient {
	return &clientMgmtServiceClient{cc}
}

func (c *clientMgmtServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (ClientMgmtService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientMgmtService_ServiceDesc.Streams[0], ClientMgmtService_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &clientMgmtServiceStreamClient{stream}
	return x, nil
}

type ClientMgmtService_StreamClient interface {
	Send(*SignedClientMessage) error
	Recv() (*SignedServerMessage, error)
	grpc.ClientStream
}

type clientMgmtServiceStreamClient struct {
	grpc.ClientStream
}

func (x *clientMgmtServiceStreamClient) Send(m *SignedClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientMgmtServiceStreamClient) Recv() (*SignedServerMessage, error) {
	m := new(SignedServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientMgmtServiceServer is the server API for ClientMgmtService service.
// All implementations must embed UnimplementedClientMgmtServiceServer
// for forward compatibility
type ClientMgmtServiceServer interface {
	Stream(ClientMgmtService_StreamServer) error
	mustEmbedUnimplementedClientMgmtServiceServer()
}

// UnimplementedClientMgmtServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientMgmtServiceServer struct {
}

func (UnimplementedClientMgmtServiceServer) Stream(ClientMgmtService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedClientMgmtServiceServer) mustEmbedUnimplementedClientMgmtServiceServer() {}

// UnsafeClientMgmtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientMgmtServiceServer will
// result in compilation errors.
type UnsafeClientMgmtServiceServer interface {
	mustEmbedUnimplementedClientMgmtServiceServer()
}

func RegisterClientMgmtServiceServer(s grpc.ServiceRegistrar, srv ClientMgmtServiceServer) {
	s.RegisterService(&ClientMgmtService_ServiceDesc, srv)
}

func _ClientMgmtService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientMgmtServiceServer).Stream(&clientMgmtServiceStreamServer{stream})
}

type ClientMgmtService_StreamServer interface {
	Send(*SignedServerMessage) error
	Recv() (*SignedClientMessage, error)
	grpc.ServerStream
}

type clientMgmtServiceStreamServer struct {
	grpc.ServerStream
}

func (x *clientMgmtServiceStreamServer) Send(m *SignedServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientMgmtServiceStreamServer) Recv() (*SignedClientMessage, error) {
	m := new(SignedClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientMgmtService_ServiceDesc is the grpc.ServiceDesc for ClientMgmtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientMgmtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clientmgmt.v1.ClientMgmtService",
	HandlerType: (*ClientMgmtServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _ClientMgmtService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "clientmgmt/v1/clientmgmt.proto",
}
