// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: comm-channel/v1/comm-channel.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommChannelService_Stream_FullMethodName = "/sync_bridge.CommChannelService/Stream"
)

// CommChannelServiceClient is the client API for CommChannelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommChannelServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (CommChannelService_StreamClient, error)
}

type commChannelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommChannelServiceClient(cc grpc.ClientConnInterface) CommChannelServiceClient {
	return &commChannelServiceClient{cc}
}

func (c *commChannelServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (CommChannelService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommChannelService_ServiceDesc.Streams[0], CommChannelService_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &commChannelServiceStreamClient{stream}
	return x, nil
}

type CommChannelService_StreamClient interface {
	Send(*SignedClientMessage) error
	Recv() (*SignedServerMessage, error)
	grpc.ClientStream
}

type commChannelServiceStreamClient struct {
	grpc.ClientStream
}

func (x *commChannelServiceStreamClient) Send(m *SignedClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *commChannelServiceStreamClient) Recv() (*SignedServerMessage, error) {
	m := new(SignedServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommChannelServiceServer is the server API for CommChannelService service.
// All implementations must embed UnimplementedCommChannelServiceServer
// for forward compatibility
type CommChannelServiceServer interface {
	Stream(CommChannelService_StreamServer) error
	mustEmbedUnimplementedCommChannelServiceServer()
}

// UnimplementedCommChannelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommChannelServiceServer struct {
}

func (UnimplementedCommChannelServiceServer) Stream(CommChannelService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedCommChannelServiceServer) mustEmbedUnimplementedCommChannelServiceServer() {}

// UnsafeCommChannelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommChannelServiceServer will
// result in compilation errors.
type UnsafeCommChannelServiceServer interface {
	mustEmbedUnimplementedCommChannelServiceServer()
}

func RegisterCommChannelServiceServer(s grpc.ServiceRegistrar, srv CommChannelServiceServer) {
	s.RegisterService(&CommChannelService_ServiceDesc, srv)
}

func _CommChannelService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommChannelServiceServer).Stream(&commChannelServiceStreamServer{stream})
}

type CommChannelService_StreamServer interface {
	Send(*SignedServerMessage) error
	Recv() (*SignedClientMessage, error)
	grpc.ServerStream
}

type commChannelServiceStreamServer struct {
	grpc.ServerStream
}

func (x *commChannelServiceStreamServer) Send(m *SignedServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *commChannelServiceStreamServer) Recv() (*SignedClientMessage, error) {
	m := new(SignedClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommChannelService_ServiceDesc is the grpc.ServiceDesc for CommChannelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommChannelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sync_bridge.CommChannelService",
	HandlerType: (*CommChannelServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _CommChannelService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "comm-channel/v1/comm-channel.proto",
}
